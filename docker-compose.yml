services:
  # Database
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongodb_data:/data/db
    networks:
      - recipe-network
    ulimits:
      nofile:
        soft: 64000
        hard: 64000
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  # MongoDB Exporter
  mongodb-exporter:
    image: percona/mongodb_exporter:0.39.0
    container_name: mongodb-exporter
    command:
      - '--mongodb.uri=mongodb://mongodb:27017'
      - '--web.listen-address=:9216'
    ports:
      - "9216:9216"
    depends_on:
      - mongodb
    networks:
      - recipe-network

  # Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - recipe-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Authentication Service
  auth-service:
    build: ./backend/auth-service
    container_name: auth-service
    restart: always
    ports:
      - "8000:8000"
      - "9090:9090"
    environment:
      - MONGO_URI=mongodb://admin:password@mongodb:27017
      - DB_NAME=recipe_app
      - SECRET_KEY=your-secret-key-for-development
      - METRICS_PORT=9090
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - recipe-network

  # Recipe Service
  recipe-service:
    build: ./backend/recipe-service
    container_name: recipe-service
    restart: always
    ports:
      - "8001:8001"
      - "9091:9091"
    environment:
      - MONGO_URI=mongodb://admin:password@mongodb:27017
      - DB_NAME=recipe_app
      - METRICS_PORT=9091
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - recipe-network

  # Ingredient Scanner Service
  ingredient-scanner-service:
    build: ./backend/ingredient-scanner-service
    container_name: ingredient-scanner-service
    restart: always
    ports:
      - "8002:8002"
      - "9092:9092"
    environment:
      - MONGO_URI=mongodb://admin:password@mongodb:27017
      - DB_NAME=recipe_app
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - recipe-network

  # Meal Planning Service
  meal-planning-service:
    build:
      context: ./backend
      dockerfile: meal-planning-service/Dockerfile
    container_name: meal-planning-service
    restart: always
    ports:
      - "8003:8003"
      - "9093:9093"
    environment:
      - MONGO_URI=mongodb://admin:password@mongodb:27017
      - DB_NAME=recipe_app
      - METRICS_PORT=9093
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - recipe-network

  # Shopping List Service
  shopping-list-service:
    build: ./backend/shopping-list-service
    container_name: shopping-list-service
    restart: always
    ports:
      - "8004:8004"
      - "9094:9094"
    environment:
      - MONGO_URI=mongodb://admin:password@mongodb:27017
      - DB_NAME=recipe_app
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - recipe-network

  # Frontend
  frontend:
    build: ./frontend
    container_name: frontend
    restart: always
    ports:
      - "3001:80"
    depends_on:
      auth-service:
        condition: service_started
      recipe-service:
        condition: service_started
      ingredient-scanner-service:
        condition: service_started
      meal-planning-service:
        condition: service_started
      shopping-list-service:
        condition: service_started
    networks:
      - recipe-network

  # API Gateway
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - auth-service
      - recipe-service
      - ingredient-scanner-service
      - meal-planning-service
      - shopping-list-service
      - frontend
    networks:
      - recipe-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9095:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - recipe-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - recipe-network

networks:
  recipe-network:
    driver: bridge

volumes:
  mongodb_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data: 